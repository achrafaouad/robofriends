{"version":3,"sources":["Card.js","Cardlist.js","robots.js","SearchBox.js","Scroll.js","ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","cardcomponent","map","user","i","key","username","SearchBox","Searchfeild","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","State","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","console","log","state","fetch","then","response","json","users","filtredrobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f0e78c1e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name ,email ,id }) => {\r\n\t\r\n\treturn(\r\n       <div className='tc bg-light-green dib br3 pa3 ma2 grow shadow-5'>\r\n       <img alt='robot' src={`https:robohash.org/${id}?200*200`} />\r\n       <div>  \r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n       </div>\r\n       </div>\r\n\r\n\t\t);\r\n}\r\n\r\n\r\nexport  default Card;","import React from 'react';\r\nimport Card from './Card';\r\n \r\n const Cardlist = ({robots}) => {\r\n \tconst cardcomponent =robots.map((user,i)=>{\r\n   return  ( <Card \r\n       key={i} \r\n       id={robots[i].id} \r\n       name={robots[i].name} \r\n       email={robots[i].email} />)\r\n \t})\r\n \treturn(\r\n \t\t<div>\r\n      \r\n     {cardcomponent}\r\n       </div>\r\n \t\t);\r\n }\r\nexport default Cardlist;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\r\n\r\n\r\n\r\nconst SearchBox = ({ Searchfeild , SearchChange }) => {\r\n\treturn (\r\n    <div className='pa2'>\r\n    <input \r\n    className='pa3 ba b--green bg-lightest-blue'\r\n    type='search' \r\n    placeholder='search robots' \r\n    onChange={SearchChange}\r\n    /> \r\n   </div>\r\n );\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n    \t<div style={{overflowY:'scroll' ,border:'1px solid black',height:'500px'}}>\r\n    \t{ props.children}\r\n        </div>\r\n    \t);\r\n};\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n        super(props);\r\n        this.State={\r\n      hasError : false\r\n        }\r\n\t}\r\n     componentDidCatch(error, info){\r\n this.setState({hasError: true})\r\n    }\r\n\trender(){\r\n\t\tif(this.State.hasError){\r\n\t\t\treturn <h1> oooops. that is not good </h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport { robots } from './robots';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css' ;\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundry from'./ErrorBoundry';\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.State = {\r\n\t\t\trobots: robots,\r\n            Searchfeild: ''\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n   onSearchChange = (event) => {\r\n     this.setState({ Searchfeild:event.target.value },function () {\r\n    console.log(this.state.Searchfeild);})\r\n     console.log(\"onSearchChange\");\r\n\r\n       }\r\n\r\n\r\n      componentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({robots}));\r\n      }\r\n\r\n\trender(){ \r\n\t\tconst {robots , Searchfeild} = this.State;\r\n\t\tconst filtredrobots = robots.filter(robot =>{\r\n   \t\treturn robot.name.toLowerCase().includes(Searchfeild.toLowerCase()) ;\r\n   \t})\r\n\t\tif(robots.length ===0)return <h1> loading </h1>\r\n\t\t\telse{\r\n\treturn (\r\n\t\t<div className='tc'>\r\n\t\t<h1 className='f1'>robotfriends </h1> \r\n\t\t<SearchBox SearchChange={ this.onSearchChange }/>\r\n\t\t<Scroll>\r\n\t\t<ErrorBoundry>\r\n\t\t<Cardlist robots={filtredrobots}/>\r\n\t\t</ErrorBoundry>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n  }\r\n}\r\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(\n  <React.StrictMode>\n    <div> \n      <App/>\n          </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}